{"version":3,"sources":["../../src/useinterval.js","../../src/typewriterswitch.js","../../src/typewriter.js","../../src/storypage.js","App.js","index.js"],"names":["useInterval","callback","delay","complete","savedCallback","useRef","interval","useEffect","setInterval","clearInterval","TypeWriterSwitch","char","color","Typewriter","useState","chunks","msg","flags","curChunk","curChar","callbackRef","setShowCursor","showCursor","newDisplay","displayMsgs","setDisplayMsgs","setComplete","_curChunk","inChunk","i","Array","skipTyping","document","key","style","chunk","StoryPage","active","_ref","_msgSwitches","msgs","setMsgSwitches","behavior","msgSwitches","typeSpeed","setDisplayActionables","displayActionables","className","actionables","onClick","actionable","ref","App","mySwitch","setSwitch","text","ReactDOM","render","getElementById"],"mappings":"sOAEMA,EAAc,SAACC,EAAUC,EAAOC,GACpC,IAAMC,EAAgBC,mBAChBC,EAAWD,iBAAjB,MAGAE,qBAAU,WACRH,cACC,CAFHG,IAKAA,qBAAU,WAIR,UAAIL,EAEF,OADAI,UAAmBE,aAJrB,WACEJ,cAGAE,GACO,kBAAMG,cAAcH,EAA3B,YAED,CARHC,IAUAA,qBAAU,WACR,GAAcE,cAAcH,EAAdG,WACb,CAFHF,KCtBIG,EAAoBC,YACxB,UACE,QACE,MAAO,CAAEC,MAAO,OAClB,QACE,MAAO,CAAEA,MAAO,QAClB,QACE,MAAO,CAAEA,MAAO,WCHhBC,EAAa,SAAC,GAAiC,IAAjC,EAAiC,EAAjC,MAAiC,EAAjC,UAAkBZ,EAAe,EAAfA,SACpC,EAAsCa,mBAAtC,yBAAM,EAAN,KAAM,EAAN,KACA,EAAoCA,oBAApC,sBAAM,EAAN,KAAM,EAAN,KACA,EAAgCA,oBAAhC,sBAAM,EAAN,KAAM,EAAN,KAEMC,EAASV,iBAAO,CAAC,CAAEW,IAAF,GAAWC,MAAO,CAAEL,MAAO,YAC5CM,EAAWb,iBAAjB,GACMc,EAAUd,iBAAhB,GACMe,EAAcf,iBAApB,GASAL,GACE,WACEqB,GAAeC,YAAD,OAAdD,OAFO,IAAXrB,GAQAA,GACE,WACE,KAAiB,CACf,IAAMuB,EAAaC,EAAnB,QAEAD,EAAWL,EAAXK,UAAgCR,UAC9BG,EAD8BH,oBAEnBI,EAFbI,SAIAE,KACAN,aAEIA,WAAmBJ,UAAeG,EAAfH,aAAvB,SACEI,YACAD,cAGEA,WAAoBH,UAAxB,QAA+CW,SAjB1C,EAAX1B,GA6DA,OAHAO,qBAlCa,WAIX,IAHA,IAAIoB,EAAJ,EACIC,GAAJ,EAESC,EAAT,EAAgBA,EAAIb,EAApB,OAAgCa,IAAK,CACnC,UAAIb,YAAwB,CAC1BW,KAEA,IAAIV,EAAQ,CAAEL,MAAO,UADrBgB,QAGaX,EAAQP,EAAiBM,SAAWa,EAApCZ,KAEbF,eAAoB,CAAEC,IAAF,GAAWC,MAAOA,IACtCY,KAGFd,kBAAiCC,SAAjCD,GAGF,IAAMS,EAAc,IAAIM,MAAMf,UAAV,aAApB,IACAU,KAEA,IAAMM,EAAa,SAAbA,IACJ,IACEL,MACAM,2CACAA,0CAIJA,wCACAA,uCAGc,CAAChB,EAAjBT,IACAA,qBA1EY,WACV,IACEc,MACAD,eAuEW,CAAfb,IAEA,EAEI,kCACGQ,EAAA,aAAmB,qBAClB,0BAAMkB,IAAN,EAAcC,MAAO,CAAEtB,MAAOuB,QAAYvB,QACvCuB,EAHP,QAME,uBANF,MAOE,uBARJ,OAcA,kCACGX,GACCA,EAAA,KAAgB,qBACd,0BAAMS,IAAN,EAAcC,MAAO,CAAEtB,MAAOG,mBAAwBH,QAH5D,MAOGU,GAAc,kCAPjB,KAQE,uBARF,MASE,uBAVJ,QCrGIc,EAAY,SAAC,GAAoD,IAApD,EAAoD,EAApD,OAAoD,EAApD,YAAoD,EAApD,YAAoD,IAApBC,cAAoB,SACrE,EAAsCvB,mBAAtC,yBAAM,EAAN,KAAM,EAAN,KACA,EAAoDA,oBAApD,sBAAM,EAAN,KAAM,EAAN,KAEMwB,EAAOjC,mBAYb,OAVAE,qBAAU,WACR,IAAMgC,EAAe,IAAIT,MAAMU,EAAV,cAArB,GACAD,QACAE,OACC,CAACD,EAJJjC,SAMAA,qBAAU,kBACR8B,EAASC,EAAA,uBAA4B,CAAEI,SAAU,gBADnDnC,KAIA,EAGE,kCACGoC,GACCH,EAAA,KAAS,cACP,OAAIG,EAAJd,GAEI,qBACEI,IADF,EAEEjB,IAFF,EAGE4B,UAHF,EAIE3C,SAAU,WACR,IAAMsC,EAAeI,EAArB,QACId,IAAQW,EAAZ,QACED,EAAaV,EAAbU,MACAE,MACKI,SAIH,QAEfC,GACC,yBAAKC,UAAU,oBACZC,OAAgB,qBACf,4BACEf,IADF,EAEEgB,QACEC,EAAA,SACI,WACEA,aACAL,OAEF,MAGLK,EAlCX,UAuCE,yBAAKC,IAAKb,KA1CM,6BAAP,OCgBAc,EA/BH,WAEV,MAAgCtC,oBAAS,GAAzC,mBAAQuC,EAAR,KAAkBC,EAAlB,KAEA,OACE,oCACE,kBAAC,EAAD,CAAWd,KAAM,CAAC,yDACG,gFACA,yCACA,yDACA,kFACA,8GACA,qHACA,gHACPI,UAAW,IACXI,YAAa,CACX,CAACO,KAAM,0BACNtD,SAAU,kBAAMqD,GAAU,KAC3B,CAACC,KAAM,gCAEvB,kBAAC,EAAD,CAAWf,KAAM,CAAC,yEACA,+BAClBQ,YAAa,CACX,CAACO,KAAM,8BAETlB,OAAQgB,M,MCxBdG,IAASC,OAAO,kBAAC,EAAD,MAASzB,SAAS0B,eAAe,U","file":"static/js/main.fa50375d.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react'\n\nconst useInterval = (callback, delay, complete) => {\n  const savedCallback = useRef()\n  const interval = useRef(null)\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current()\n    }\n    if (delay !== null) {\n      interval.current = setInterval(tick, delay)\n      return () => clearInterval(interval.current)\n    }\n  }, [delay])\n\n  useEffect(() => {\n    if (complete) clearInterval(interval.current)\n  }, [complete])\n}\n\nexport default useInterval\n","const TypeWriterSwitch = (char) => {\n  switch (char) {\n    case 'R':\n      return { color: 'red' }\n    case 'B':\n      return { color: 'blue' }\n    default:\n      return { color: 'black' }\n  }\n}\n\nexport default TypeWriterSwitch\n","import React, { Fragment, useEffect, useState, useRef } from 'react'\nimport useInterval from './useinterval'\nimport TypeWriterSwitch from './typewriterswitch'\n\nconst Typewriter = ({ msg, typeSpeed, callback }) => {\n  const [displayMsgs, setDisplayMsgs] = useState(null)\n  const [showCursor, setShowCursor] = useState(true)\n  const [complete, setComplete] = useState(false)\n\n  const chunks = useRef([{ msg: '', flags: { color: 'black' } }])\n  const curChunk = useRef(0)\n  const curChar = useRef(0)\n  const callbackRef = useRef(callback)\n\n  const end = () => {\n    if (complete) {\n      setShowCursor(false)\n      callbackRef.current()\n    }\n  }\n\n  useInterval(\n    () => {\n      setShowCursor((showCursor) => !showCursor)\n    },\n    250,\n    complete\n  )\n\n  useInterval(\n    () => {\n      if (displayMsgs) {\n        const newDisplay = displayMsgs.slice()\n\n        newDisplay[curChunk.current] += chunks.current[\n          curChunk.current\n        ].msg.charAt(curChar.current)\n\n        setDisplayMsgs(newDisplay)\n        curChar.current += 1\n\n        if (curChar.current >= chunks.current[curChunk.current].msg.length) {\n          curChar.current = 0\n          curChunk.current += 1\n        }\n\n        if (curChunk.current >= chunks.current.length) setComplete(true)\n      }\n    },\n    typeSpeed,\n    complete\n  )\n\n  const init = () => {\n    let _curChunk = 0\n    let inChunk = false\n\n    for (let i = 0; i < msg.length; i++) {\n      if (msg.charAt(i) === '\\\\') {\n        _curChunk += 1\n        inChunk = !inChunk\n        let flags = { color: 'black' }\n\n        if (inChunk) flags = TypeWriterSwitch(msg.charAt(i + 1))\n\n        chunks.current.push({ msg: '', flags: flags })\n        i += 2\n      }\n\n      chunks.current[_curChunk].msg += msg.charAt(i)\n    }\n\n    const displayMsgs = new Array(chunks.current.length).fill('')\n    setDisplayMsgs(displayMsgs)\n\n    const skipTyping = () => {\n      if (displayMsgs) {\n        setComplete(true)\n        document.removeEventListener('keypress', skipTyping)\n        document.removeEventListener('click', skipTyping)\n      }\n    }\n\n    document.addEventListener('keypress', skipTyping)\n    document.addEventListener('click', skipTyping)\n  }\n\n  useEffect(init, [msg, typeSpeed])\n  useEffect(end, [complete])\n\n  if (complete) {\n    return (\n      <>\n        {chunks.current.map((chunk, i) => (\n          <span key={i} style={{ color: chunk.flags.color }}>\n            {chunk.msg}\n          </span>\n        ))}\n        <br />\n        <br />\n      </>\n    )\n  }\n\n  return (\n    <>\n      {displayMsgs &&\n        displayMsgs.map((msg, i) => (\n          <span key={i} style={{ color: chunks.current[i].flags.color }}>\n            {msg}\n          </span>\n        ))}\n      {showCursor && <>|</>}\n      <br />\n      <br />\n    </>\n  )\n}\n\nexport default Typewriter\n","import React, { Fragment, useEffect, useState, useRef } from 'react'\nimport Typewriter from './typewriter'\n\nconst StoryPage = ({ msgs, typeSpeed, actionables, active = true }) => {\n  const [msgSwitches, setMsgSwitches] = useState(null)\n  const [displayActionables, setDisplayActionables] = useState(false)\n\n  const _ref = useRef()\n\n  useEffect(() => {\n    const _msgSwitches = new Array(msgs.length).fill(false)\n    _msgSwitches[0] = true\n    setMsgSwitches(_msgSwitches)\n  }, [msgs.length])\n\n  useEffect(() =>\n    active ? _ref.current.scrollIntoView({ behavior: 'smooth' }) : undefined\n  )\n\n  if (!active) return <></>\n\n  return (\n    <>\n      {msgSwitches &&\n        msgs.map((msg, i) => {\n          if (msgSwitches[i])\n            return (\n              <Typewriter\n                key={i}\n                msg={msg}\n                typeSpeed={typeSpeed}\n                callback={() => {\n                  const _msgSwitches = msgSwitches.slice()\n                  if (i + 1 < msgs.length) {\n                    _msgSwitches[i + 1] = true\n                    setMsgSwitches(_msgSwitches)\n                  } else setDisplayActionables(true)\n                }}\n              />\n            )\n          else return null\n        })}\n      {displayActionables && (\n        <div className='button-container'>\n          {actionables.map((actionable, i) => (\n            <button\n              key={i}\n              onClick={\n                actionable.callback\n                  ? () => {\n                      actionable.callback()\n                      setDisplayActionables(false)\n                    }\n                  : null\n              }\n            >\n              {actionable.text}\n            </button>\n          ))}\n        </div>\n      )}\n      <div ref={_ref} />\n    </>\n  )\n}\n\nexport default StoryPage\n","import React from 'react'\nimport { useState } from 'react'\nimport { StoryPage } from 'react-typewriter-component'\n\nconst App = () => {\n\n  const [ mySwitch, setSwitch ] = useState(false)\n\n  return (\n    <>\n      <StoryPage msgs={[\"Here is an example on how to use this React component.\",\n                           \"Currently, only colours \\\\Rred\\\\R and \\\\Bblue\\\\B are supported. More to come.\",\n                           \"Style the component using regular CSS.\",\n                           \"Messages can be skipped by clicking or pressing space.\",\n                           \"Actionables are buttons displayed after the messages have been finished typing.\",\n                           \"They have callbacks that can be used to set state (or whatever you like) to move your text adventure along.\",\n                           \"The 'StoryPage' component has an 'active' switch that can be used to prompt new text to display after actionables.\",\n                           \"Forthcoming features will include conditionals for actionables, more typing effects, sound queues, and more.\"]}\n                    typeSpeed={100}\n                    actionables={[\n                      {text: \"Click me for more text.\",\n                       callback: () => setSwitch(true)},\n                      {text: \"Non-functional actionable\"}\n                    ]} />\n      <StoryPage msgs={[\"You clicked the button and activated more text! This one types faster.\",\n                        \"That's all for the example.\"]} \n      actionables={[\n        {text: \"Non-functional actionable\"}\n      ]}\n      active={mySwitch} />\n    </>\n  )\n\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}